#!/usr/bin/python
import os
import subprocess
import datetime
import time
import logging
import shlex
from service import mi2app_utils as util
from mobile_insight.analyzer import Analyzer


ANDROID_SHELL = "/system/bin/sh"



class IntelMonitor(Analyzer):
    def __init__(self):
        Analyzer.__init__(self)

        self.__log_dir = util.get_mobileinsight_log_path()
        if not os.path.exists(self.__log_dir):
            os.makedirs(self.__log_dir)

        self.__log_timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        self.base_log = "intel_log_%s.txt" % (self.__log_timestamp)
        self.abs_log = os.path.join(self.__log_dir, self.base_log)

        self.pid = -1

        # self._get_thread_pid(self.proc_name)

    def _get_thread_pid(self, proc_name):
        proc = subprocess.Popen(
            "su -c ps | grep -i %s" % proc_name,
            executable=ANDROID_SHELL,
            shell=True,
            stdout=subprocess.PIPE)
        out = proc.communicate()

        try:
            self.pid = str(out[0].split('\n')[0]).split()[1]
            self.log_info("_get_thread_pid: self.pid = %s" % self.pid)
        except:
            self.log_warning("Exception when getting %s threads" % proc_name)

    def writeLog(self, cmd):
        self.execute('log -p d -t ASUS_MTS-SH \'' + cmd + '\'')

    def execute(self, cmd):
        # subprocess.call(cmd.split(), shell = )
        # args = shlex.split(cmd)
        self.log_info(cmd)
        p = subprocess.Popen(cmd, shell=True, executable=ANDROID_SHELL, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()

        if (err != ''):
            logging.info(cmd)
            logging.info("error: " + err)
        return out

    def run(self):
        logging.info("RUNNING")
        #firstLog = subprocess.check_output(['getprop', 'debug.asus.qxdmlog.first'])
        #runMtbf = subprocess.check_output(['getprop', 'debug.asus.qxdmlog.mtbf'])
        firstLog = self.execute('getprop debug.asus.qxdmlog.first')
        runMtbf = self.execute('getprop debug.asus.qxdmlog.mtbf')
        if firstLog == '':
            self.execute('setprop debug.asus.qxdmlog.first 1')
            self.execute('sleep 7')
        else:
            self.execute('sleep 1')

        if runMtbf == '1':
            date = 'mtbf'
        else:
            date = datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')
            #date = self.execute('date +%Y_%m_%d_%H_%M_%S')
        outDir=''

        self.execute('set -x')
        self.writeLog('run modemtrace-starter')
        self.log_info('run modemtrace-starter')
        #storageType = subprocess.check_output('getprop persist.asus.qxdmlog.sd1mmc0')
        storageType = self.execute('getprop persist.asus.qxdmlog.sd1mmc0')
        if storageType == '1':
            outDir='/Removable/MicroSD/diag_logs/QXDM_logs/' + date
        else:
            outDir='/sdcard/diag_logs/QXDM_logs/' + date
        #for mobileinsight logging
        #outDir = os.path.join(self.__log_dir, date)
        #cache_directory = util.get_cache_dir()
        #log_directory = os.path.join(cache_directory, "mi2log")
        #outDir = log_directory
        self.execute('mkdir -p ' + outDir)
        #self.execute('chmod 664 ' + outDir)
        #self.execute('mkdir -m 777 -p ' + outDir)
        if not os.path.exists(outDir):
            self.log_error('could not create output directory ' + outDir)
            return 1
        if not os.access(outDir, os.W_OK):
            self.log_error('modemdump-starter.sh: ' + outDir + ' not writable')
            return  1
        self.writeLog('Writing modemdump data to ' + outDir + ' ...')
        self.log_info('Writing modemdump data to ' + outDir + ' ...')
        self.execute('echo ' + outDir + ' >> /data/local/tmp/latestModemDumplogpath.txt')

        #modemLevel_Value = subprocess.check_output(['getprop', 'persist.logtool.modem.level'])
        modemLevel_Value = self.execute('getprop persist.logtool.modem.level')
        if modemLevel_Value=='':
            self.execute('setprop persist.logtool.modem.level 3')
            self.log_info('Writing level data to ' + modemLevel_Value + ' ...')
            self.writeLog('Writing level data to ' + modemLevel_Value + ' ...')
        if runMtbf == '1':
            self.execute('setprop persist.logtool.modem.level 5')
        #rotateNumValue = subprocess.check_output(['getprop','persist.asus.qxdmlog.maxfiles'])
        rotateNumValue = self.execute('getprop persist.asus.qxdmlog.maxfiles')
        if rotateNumValue == '' or rotateNumValue is None:
            rotateNum = '5'
        else:
            rotateNum = rotateNumValue

        rotateSizeValue = self.execute('getprop persist.logtool.modem.logsize')
        if rotateSizeValue == '' or rotateSizeValue is None:
            rotateSize='100000'
        else:
            rotateSize = rotateSizeValue
        logging.info(rotateSize)
        rotateSize = '100000'

        self.execute('setprop persist.service.mts.input /dev/mdmTrace')
        self.execute('setprop persist.service.mts.output ' + outDir + '/Mdumplist.txt')
        self.execute('setprop persist.service.mts.output_type f')
        self.execute('setprop persist.logtool.modem.num ' + rotateNum)
        self.execute('setprop persist.service.mts.rotate_size ' + rotateSize)
        logging.info('executing asus_mts...')
        self.execute('/system/bin/asus_mts')
        self.execute('sleep 3')
        self.writeLog('Modem: mts service shutdown by unknow reason ...')

mIntelMonitor = IntelMonitor()

mIntelMonitor.log_info("This plugin requires the asus_mts script.")
mIntelMonitor.run()